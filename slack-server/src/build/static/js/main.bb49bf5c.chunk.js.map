{"version":3,"sources":["constants.js","components/loginPanel/loginPanel.js","components/layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["getSocketUrl","window","location","href","includes","getIconNameFromString","iconName","faCode","faGamepad","LoginPanel","props","namespaceList","login","useState","name","setName","Container","fluid","className","type","value","placeholder","onChange","e","target","length","map","namespace","index","onClick","key","icon","id","LayoutComponent","state","serverUrl","rooms","NSSocket","currentNS","currentRoom","room","history","currentUsersInRoom","chatMsgVal","currentUser","sidePanelOpen","handleUserLogin","namespaceToJoin","setState","joinNamespace","alert","namespaceName","close","io","connect","on","msg","console","log","selectedNS","filter","ns","joinRoom","roomName","emit","currentNoOfUsers","chatHistory","toggleSidePanel","push","message","renderRoomList","renderChatHistory","chatMsg","user","Media","faUser","Body","sendMessage","onChatMsgChange","event","socket","this","mainSocketMsg","data","disconnect","Col","style","zIndex","xl","lg","md","sm","faCircle","faTimes","faBars","faPaperPlane","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.bb49bf5c.chunk.js","sourcesContent":["import { faGamepad, faCode } from \"@fortawesome/free-solid-svg-icons\";\nexport const getSocketUrl = () => {\n    if(window.location.href.includes('localhost')){\n        return \"http://localhost:4000/\"; //When in local PORT is 4000 for Node Server\n    }\n    else{\n        return '/';\n    }\n}\n\nexport const getIconNameFromString = (iconName) => {\n    switch (iconName) {\n      case \"faCode\": return faCode;\n      case \"faGamepad\": return faGamepad;\n      default: return faGamepad;\n    }\n}","import React , {useState} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport './loginPanel.scss';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {getIconNameFromString} from '../../constants';\nconst LoginPanel = ( props ) => {\n    const { namespaceList, login } = props;\n    const [name, setName] = useState(\"\");\n    return (\n      <Container fluid className=\"loginWindow\">\n        <div>\n          <h1>Welcome To Slack Clone </h1>\n        </div>\n        <div>\n          <input\n            className=\"nameInput\"\n            type=\"text\"\n            value={name}\n            placeholder=\"Enter your name here...\"\n            onChange={(e) => setName(e.target.value)}\n          />\n        </div>\n        <div>\n          <h2>Select a namespace to join</h2>\n          <div className=\"nsListContainer\">\n            {namespaceList.length > 0 &&\n                namespaceList.map((namespace, index) => {\n                return (\n                  <div\n                    className=\"nsList\"\n                    onClick={() => login(name, namespace.name)}\n                    key={namespace.name + index}\n                  >\n                    <FontAwesomeIcon\n                      className=\"nsIcons\"\n                      icon={\n                        getIconNameFromString(namespace.icon) \n                      }\n                    />\n                    <span id={namespace.name} className=\"nsBtn\">\n                      {namespace.name}\n                    </span>\n                  </div>\n                );\n                })}\n          </div>\n        </div>\n      </Container>\n    );\n}\n\nexport default LoginPanel;","import React, { Component } from 'react';\nimport io from 'socket.io-client';\nimport \"./Layout.scss\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPaperPlane, faCircle, faBars, faTimes, faUser } from \"@fortawesome/free-solid-svg-icons\";\nimport Col from \"react-bootstrap/Col\";\nimport Media from 'react-bootstrap/Media';\nimport { getSocketUrl, getIconNameFromString } from \"../../constants\";\nimport LoginPanel from '../loginPanel/loginPanel';\nclass LayoutComponent extends Component {\n  state = {\n    serverUrl: getSocketUrl(),\n    namespaceList: [\n      {\n        name: \"\",\n        icon: \"\",\n        rooms: [],\n      },\n    ],\n    NSSocket: null,\n    currentNS: {\n      name: \"\",\n      icon: \"\",\n      rooms: [],\n    },\n    currentRoom: {\n      room: \"\",\n      history: [],\n    },\n    currentUsersInRoom: 0,\n    chatMsgVal: \"\",\n    currentUser: \"\",\n    sidePanelOpen: false,\n  };\n  componentDidMount() {\n    const socket = io(this.state.serverUrl);\n    socket.on(\"mainSocketMsg\", (mainSocketMsg) => {\n      if (mainSocketMsg.message.type === \"namespaceList\") {\n        this.setState({ namespaceList: mainSocketMsg.message.data });\n        socket.disconnect();\n      }\n    });\n  }\n  handleUserLogin = (name, namespaceToJoin) => {\n    if (!name) {\n      alert(\"Please enter name\");\n    } else {\n      this.setState({ currentUser: name });\n      this.joinNamespace(namespaceToJoin);\n    }\n  };\n  joinNamespace = (namespaceName) => {\n    let { NSSocket } = this.state;\n    if (NSSocket) {\n      NSSocket.close();\n    }\n    NSSocket = io.connect(`${this.state.serverUrl + namespaceName}`);\n    NSSocket.on(`NSMsg`, (msg) => {\n      console.log(\"On connect msg: \" , msg);\n      const selectedNS = this.state.namespaceList.filter(\n        (ns) => ns.name === namespaceName\n      );\n      this.setState({ NSSocket, currentNS: selectedNS[0] });\n      this.joinRoom(selectedNS[0].rooms[0]);\n    });\n  };\n\n  joinRoom = (roomName) => {\n    let { currentNS, NSSocket } = this.state;\n    NSSocket.close();\n    NSSocket = io.connect(`${this.state.serverUrl + currentNS.name}`);\n    this.setState({ NSSocket });\n    NSSocket.emit(\n      `NSClientMsg`,roomName,\n      (currentNoOfUsers, chatHistory) => {\n        this.setState({\n          currentUsersInRoom: currentNoOfUsers,\n          currentRoom: {\n            room: chatHistory.roomName,\n            history: chatHistory.history,\n          },\n          NSSocket,\n        });\n        this.toggleSidePanel();\n      }\n    );\n    NSSocket.on(`RoomMsg`, (msg) => {\n      const { currentRoom } = this.state;\n      const chatHistory = currentRoom.history;\n      if (msg.type === \"chatMsg\") {\n        chatHistory.push(msg.message);\n        this.setState({\n          currentRoom,\n          ...chatHistory,\n        });\n      } else {\n        console.log(\"Error fetching message from room \", currentRoom);\n      }\n    });\n  };\n\n  renderRoomList = () => {\n    const { currentNS } = this.state;\n    return currentNS.rooms.map((room, index) => {\n      return (\n        <span\n          key={room + index}\n          id={room + \"Btn\"}\n          className=\"nsBtn\"\n          onClick={() => this.joinRoom(room)}\n        >\n          {\"#\" + room}\n        </span>\n      );\n    });\n  };\n\n  renderChatHistory = () => {\n    const { currentRoom } = this.state;\n    if (currentRoom?.history?.length > 0) {\n      return (\n        <div className=\"chatContent\">\n          {this.state.currentRoom.history.map((chatMsg, index) => {\n            const { message, user } = chatMsg;\n            return (\n              <Media key={index}>\n                <FontAwesomeIcon className=\"userIcon\" icon={faUser} />\n                <Media.Body>\n                  <h5>{user}</h5>\n                  <p>{message}</p>\n                </Media.Body>\n              </Media>\n            );\n          })}\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"chatContent\">\n          <h1 className=\"greyText\">No content here :(</h1>\n          <h3 className=\"greyText\">But you can always initiate a chat....</h3>\n        </div>\n      );\n    }\n  };\n  sendMessage = () => {\n    const { chatMsgVal, currentUser, currentRoom, NSSocket } = this.state;\n    const chatMsg = {\n      message: chatMsgVal,\n      user: currentUser,\n    };\n    NSSocket.emit(`roomChatMsg`, {\n      type: \"sendRoomMessage\",\n      message: chatMsg,\n      room: currentRoom.room,\n    });\n    this.setState({ chatMsgVal: \"\" });\n  };\n\n  toggleSidePanel = () => {\n    const { sidePanelOpen } = this.state;\n    this.setState({ sidePanelOpen: !sidePanelOpen });\n  };\n\n  onChatMsgChange = (event) =>\n    this.setState({ chatMsgVal: event.target.value });\n\n  render() {\n    return (\n      <div className=\"row mainComponent\">\n        {this.state.currentUser === \"\" && (\n          <LoginPanel\n            login={this.handleUserLogin}\n            namespaceList={this.state.namespaceList}\n          />\n        )}\n        {this.state.currentUser !== \"\" && (\n          <>\n            <Col\n              style={{ zIndex: this.state.sidePanelOpen ? \"100\" : \"0\" }}\n              className=\"sidePanel\"\n              xl=\"3\"\n              lg=\"4\"\n              md=\"4\"\n              sm=\"5\"\n            >\n              <div className=\"nsPanel col-lg-5\">\n                {this.state.namespaceList.length > 0 &&\n                  this.state.namespaceList.map((namespace, index) => {\n                    return (\n                      <div\n                        className=\"nsContent\"\n                        onClick={() => this.joinNamespace(namespace.name)}\n                        key={namespace.name + index}\n                      >\n                        <FontAwesomeIcon\n                          className=\"nsIcons\"\n                          icon={getIconNameFromString(namespace.icon)}\n                        />\n                        <span id={namespace.name} className=\"nsBtn\">\n                          {namespace.name}\n                        </span>\n                      </div>\n                    );\n                  })}\n              </div>\n              <div className=\"roomPanel\">\n                <div className=\"userHeader\">\n                  <h4>\n                    {this.state.currentUser}\n                    <FontAwesomeIcon className=\"online\" icon={faCircle} />\n                  </h4>\n                  <FontAwesomeIcon\n                    className=\"cross\"\n                    onClick={this.toggleSidePanel}\n                    icon={faTimes}\n                  />\n                </div>\n                {this.state.currentNS?.rooms?.length > 0 &&\n                  this.renderRoomList()}\n              </div>\n            </Col>\n            <Col className=\"chatPanel\">\n              <div className=\"msgPanel\">\n                <div className=\"roomHeader col-lg-12\">\n                  <h4>#{this.state.currentRoom?.room}</h4>\n                  <FontAwesomeIcon\n                    className=\"hamburger\"\n                    onClick={this.toggleSidePanel}\n                    icon={faBars}\n                  />\n                </div>\n                <div className=\"msgWindow\">\n                  <div id=\"chatWindowPanel\" className=\"chatWindowPanel\">\n                    {this.renderChatHistory()}\n                  </div>\n                </div>\n                <div className=\"chatFormDiv\">\n                  <input\n                    type=\"text\"\n                    id=\"chatInput\"\n                    placeholder=\"Type Message Here..\"\n                    onChange={this.onChatMsgChange}\n                    value={this.state.chatMsgVal}\n                  />\n                  <FontAwesomeIcon\n                    id=\"sendBtn\"\n                    onClick={this.sendMessage}\n                    icon={faPaperPlane}\n                  />\n                </div>\n              </div>\n            </Col>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default LayoutComponent","import React from 'react';\nimport './App.scss';\nimport LayoutComponent from \"./components/layout/Layout\";\n\nfunction App() {\n  return (<LayoutComponent/>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}